JWT(JSON WEB TOKEN)
 It authentication mechanism used like cookie but it has more advantage than cookie and session

 *DRAWBACK S WITH COOKIE-BASED AUTH 
      **POOR-SCALABILITY - THE SEESION STORE NEEDS TO BE SCALED WHEN SCALING THE SERVER
      **PERFORMANCE ISSUE - WHEN THE SEESION STORED IN THE SERVER, A LOT LOOKUP ON DATABASE
       IN EVERY REQUEST WHICH CAN SLOW DOWN THE SERVER.
      **NATIVE APPS(OR NON-BROWSER APP) - BROWSER HANDLE COOKIES, BUT CUSROM APPS DON'T LIKE MOBILE 
      UP CANT HANDLE COOKIE, THEY USE DIFFRENET MECHANISM TO HANDLE.
      **CSRF(CROSS-SITE REQUEST FORGERY) - IF THE BROWSER USE COOKIE, IT'S NEEDS ANOTHER SECURITY MECHANISM FORM  
      CROSS-SITE REQUEST FORGERY TO PROTECT DIFFERENT REQUEST.
      **CORS(CROSS ORIGIN RESOURCE SHARING) - CROS IS AN HTTP-HEADER BASED MECHANISM THAT ALLOWS A SERVER TO INDICATE
      ANY ORIGINS( DOMAIN, SCHEME).COOKIE + CORS DON'T PLAY WELL ACROSS DIFFERENT DOMAINS.

  JSON WEB TOKEN 
     **JWT DON'T USE SESSION
     **HAVE NO PROBLEM WITH NATIVE APPS
     **DON'T NEED SPECILA CSRF PROTECTIONS
     **THEY WORK LIKE A CHARM WITH CORS.

    HOW JWT WORKS 
     ** A JWT IS SELF-CONTAINED. 
     ** THER ARE THREE DIFFERENT PART WHEN YOU CREATE JWT 
           1. A HEADER
           2. A PAYLOAD
           3. A SIGNATURE

        1.THE HEADER NORMALY CONTIANS TWO THINGS: 
             I, THE TYPE OF THE TOKEN
             II, THE NAME OF THE ALGORITHM USED  TO MAKE THE SIGNATURE
                  E.G {typ:'JWT', alg:'HS256'} - THIS GET ENCODED INTO BASE64
        2. A PAYLOAD - IS JSON OBJECT OF DATA. YOU CAN PUT WHATEVER YOU WANT IN IT
                  E.G {USERID:2}
        3. A SIGNATURE IS A HASH OF THE ENCODED HEADER, THE ENCODED PAYLOAD AND A SECRET KEY THAT YOU PROVIDE
        USING THE ALGORITHM DEFINED IN THE HEADER.
        
      